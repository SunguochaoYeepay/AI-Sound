# MegaTTS3 Enhanced API - Docker容器增强部署配置
# 适用于现有Docker环境的增强部署方案

version: '3.8'

services:
  # ================================
  # 增强的MegaTTS3服务 - 基于现有镜像
  # ================================
  megatts-enhanced:
    image: megatts3:latest  # 使用现有构建好的镜像
    container_name: megatts-enhanced-api
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=7929
      - INFERENCE_WORKERS=2
      - LOG_LEVEL=info
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      - VOICE_STORAGE_PATH=/app/storage
    volumes:
      - ./MegaTTS/MegaTTS3/storage:/app/storage
      - ./MegaTTS/MegaTTS3/checkpoints:/app/checkpoints:ro
      - ./MegaTTS/MegaTTS3/logs:/app/logs
    ports:
      - "7931:7929"    # 使用不同端口避免冲突
      - "9090:9090"    # Metrics
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'
    networks:
      - ai-sound-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7929/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================
  # 轻量级监控服务 - Prometheus
  # ================================
  prometheus-lite:
    image: prom/prometheus:latest
    container_name: megatts-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
    volumes:
      - ./monitoring/prometheus-lite.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9091:9090"   # 避免与API metrics端口冲突
    restart: unless-stopped
    networks:
      - ai-sound-network

  # ================================
  # 轻量级可视化 - Grafana
  # ================================
  grafana-lite:
    image: grafana/grafana:latest
    container_name: megatts-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-lite:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - ai-sound-network
    depends_on:
      - prometheus-lite

  # ================================
  # Redis缓存 - 用于API缓存和队列
  # ================================
  redis-cache:
    image: redis:7-alpine
    container_name: megatts-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - ai-sound-network

  # ================================
  # Nginx反向代理 - API网关
  # ================================
  nginx-gateway:
    image: nginx:alpine
    container_name: megatts-nginx
    volumes:
      - ./nginx/nginx-lite.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/logs:/var/log/nginx
    ports:
      - "8080:80"     # HTTP入口
    depends_on:
      - megatts-enhanced
    restart: unless-stopped
    networks:
      - ai-sound-network

  # ESPnet TTS引擎服务
  espnet-tts:
    image: my-espnet-gradio:latest
    container_name: ai-sound-espnet-enhanced
    command: ["/bin/bash", "-c", "cd /workspace && python espnet_server.py"]
    ports:
      - "9001:9001"
    volumes:
      - ./MegaTTS/espnet:/workspace
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONPATH=/workspace
    networks:
      - ai-sound-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

# ================================
# 网络和存储配置
# ================================
networks:
  ai-sound-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  redis-data:
    driver: local