"""add_voice_fields_to_characters

Revision ID: 1a9e41389f3a
Revises: 6ac123a0d10f
Create Date: 2025-07-09 20:51:54.422950

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '1a9e41389f3a'
down_revision = '6ac123a0d10f'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('chapters')
    op.drop_table('system_config')
    op.drop_index('idx_environment_audio_mixing_jobs_session_id', table_name='environment_audio_mixing_jobs')
    op.drop_table('environment_audio_mixing_jobs')
    op.drop_index('ix_render_tasks_created_at', table_name='render_tasks')
    op.drop_index('ix_render_tasks_id', table_name='render_tasks')
    op.drop_index('ix_render_tasks_project_id', table_name='render_tasks')
    op.drop_index('ix_render_tasks_task_status', table_name='render_tasks')
    op.drop_table('render_tasks')
    op.drop_index('ix_characters_id', table_name='characters')
    op.drop_table('characters')
    op.drop_index('idx_environment_generation_sessions_chapter_id', table_name='environment_generation_sessions')
    op.drop_index('idx_environment_generation_sessions_project_id', table_name='environment_generation_sessions')
    op.drop_table('environment_generation_sessions')
    op.drop_index('ix_audio_clips_end_time', table_name='audio_clips')
    op.drop_index('ix_audio_clips_id', table_name='audio_clips')
    op.drop_index('ix_audio_clips_start_time', table_name='audio_clips')
    op.drop_index('ix_audio_clips_track_id', table_name='audio_clips')
    op.drop_table('audio_clips')
    op.drop_index('ix_audio_video_projects_created_at', table_name='audio_video_projects')
    op.drop_index('ix_audio_video_projects_id', table_name='audio_video_projects')
    op.drop_index('ix_audio_video_projects_name', table_name='audio_video_projects')
    op.drop_index('ix_audio_video_projects_status', table_name='audio_video_projects')
    op.drop_table('audio_video_projects')
    op.drop_table('task_queue')
    op.drop_table('voice_characters')
    op.drop_table('environment_sound_tag_relations')
    op.drop_index('idx_environment_generation_logs_session_id', table_name='environment_generation_logs')
    op.drop_table('environment_generation_logs')
    op.drop_index('ix_editor_tracks_id', table_name='editor_tracks')
    op.drop_index('ix_editor_tracks_project_id', table_name='editor_tracks')
    op.drop_index('ix_editor_tracks_track_order', table_name='editor_tracks')
    op.drop_table('editor_tracks')
    op.drop_index('idx_environment_track_configs_segment_id', table_name='environment_track_configs')
    op.drop_index('idx_environment_track_configs_session_id', table_name='environment_track_configs')
    op.drop_index('idx_environment_track_configs_track_index', table_name='environment_track_configs')
    op.drop_index('idx_environment_track_configs_validation_status', table_name='environment_track_configs')
    op.drop_table('environment_track_configs')
    op.drop_index('ix_editor_settings_id', table_name='editor_settings')
    op.drop_index('ix_editor_settings_project_id', table_name='editor_settings')
    op.drop_table('editor_settings')
    op.drop_table('reader_projects')
    op.drop_table('system_logs_backup')
    op.alter_column('audio_files', 'filename',
               existing_type=sa.VARCHAR(length=255),
               nullable=False,
               comment='文件名')
    op.alter_column('audio_files', 'original_name',
               existing_type=sa.VARCHAR(length=255),
               comment='原始文件名',
               existing_nullable=True)
    op.alter_column('audio_files', 'file_path',
               existing_type=sa.TEXT(),
               comment='文件路径',
               existing_nullable=False)
    op.alter_column('audio_files', 'file_size',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               comment='文件大小(字节)',
               existing_nullable=True)
    op.alter_column('audio_files', 'duration',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='音频时长(秒)',
               existing_nullable=True)
    op.alter_column('audio_files', 'type',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               comment='音频类型',
               existing_nullable=True)
    op.alter_column('audio_files', 'project_id',
               existing_type=sa.INTEGER(),
               comment='项目ID',
               existing_nullable=True)
    op.alter_column('audio_files', 'chapter_id',
               existing_type=sa.INTEGER(),
               comment='章节ID',
               existing_nullable=True)
    op.alter_column('audio_files', 'chapter_number',
               existing_type=sa.INTEGER(),
               comment='章节号',
               existing_nullable=True)
    op.alter_column('audio_files', 'segment_id',
               existing_type=sa.INTEGER(),
               comment='段落ID',
               existing_nullable=True)
    op.alter_column('audio_files', 'character_name',
               existing_type=sa.VARCHAR(length=100),
               comment='角色名',
               existing_nullable=True)
    op.alter_column('audio_files', 'speaker',
               existing_type=sa.VARCHAR(length=100),
               comment='说话人',
               existing_nullable=True)
    op.alter_column('audio_files', 'paragraph_index',
               existing_type=sa.INTEGER(),
               comment='段落索引',
               existing_nullable=True)
    op.alter_column('audio_files', 'voice_profile_id',
               existing_type=sa.INTEGER(),
               comment='声音档案ID',
               existing_nullable=True)
    op.alter_column('audio_files', 'text_content',
               existing_type=sa.TEXT(),
               comment='文本内容',
               existing_nullable=True)
    op.alter_column('audio_files', 'audio_type',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               comment='音频类型: segment, final, environment',
               existing_nullable=True)
    op.alter_column('audio_files', 'sample_rate',
               existing_type=sa.INTEGER(),
               comment='采样率',
               existing_nullable=True)
    op.alter_column('audio_files', 'channels',
               existing_type=sa.INTEGER(),
               comment='声道数',
               existing_nullable=True)
    op.alter_column('audio_files', 'file_metadata',
               existing_type=sa.TEXT(),
               comment='文件元数据',
               existing_nullable=True)
    op.alter_column('audio_files', 'is_favorite',
               existing_type=sa.BOOLEAN(),
               comment='是否收藏',
               existing_nullable=True)
    op.alter_column('audio_files', 'tags',
               existing_type=sa.TEXT(),
               comment='标签',
               existing_nullable=True)
    op.alter_column('audio_files', 'processing_time',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='处理时间(秒)',
               existing_nullable=True)
    op.alter_column('audio_files', 'model_used',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               comment='使用的模型',
               existing_nullable=True)
    op.alter_column('audio_files', 'parameters',
               existing_type=sa.TEXT(),
               comment='处理参数',
               existing_nullable=True)
    op.alter_column('audio_files', 'status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               comment='状态: active, archived, deleted',
               existing_nullable=True)
    op.alter_column('audio_files', 'id',
               existing_type=sa.INTEGER(),
               comment='主键ID',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('audio_files', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='创建时间',
               existing_nullable=True)
    op.alter_column('audio_files', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='更新时间',
               existing_nullable=True)
    op.drop_index('idx_audio_files_audio_type', table_name='audio_files')
    op.drop_index('idx_audio_files_chapter_id', table_name='audio_files')
    op.drop_index('idx_audio_files_project_id', table_name='audio_files')
    op.drop_index('ix_audio_files_id', table_name='audio_files')
    op.drop_constraint('audio_files_segment_id_fkey', 'audio_files', type_='foreignkey')
    op.create_foreign_key(None, 'audio_files', 'book_chapters', ['chapter_id'], ['id'])
    op.alter_column('book_chapters', 'character_count',
               existing_type=sa.INTEGER(),
               comment='字符数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.drop_index('idx_book_chapters_character_count', table_name='book_chapters')
    op.alter_column('books', 'title',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=255),
               comment='书籍标题',
               existing_nullable=False)
    op.alter_column('books', 'author',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               comment='作者',
               existing_nullable=True)
    op.alter_column('books', 'description',
               existing_type=sa.TEXT(),
               comment='描述',
               existing_nullable=True)
    op.alter_column('books', 'content',
               existing_type=sa.TEXT(),
               nullable=True,
               comment='书籍内容')
    op.alter_column('books', 'chapters_data',
               existing_type=sa.TEXT(),
               comment='章节数据',
               existing_nullable=True)
    op.alter_column('books', 'status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               comment='状态: draft, published, archived',
               existing_nullable=True)
    op.alter_column('books', 'tags',
               existing_type=sa.TEXT(),
               comment='标签JSON',
               existing_nullable=True)
    op.alter_column('books', 'word_count',
               existing_type=sa.INTEGER(),
               comment='字数',
               existing_nullable=True)
    op.alter_column('books', 'chapter_count',
               existing_type=sa.INTEGER(),
               comment='章节数',
               existing_nullable=True)
    op.alter_column('books', 'source_file_path',
               existing_type=sa.VARCHAR(length=500),
               comment='源文件路径',
               existing_nullable=True)
    op.alter_column('books', 'source_file_name',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=255),
               comment='源文件名',
               existing_nullable=True)
    op.alter_column('books', 'character_summary',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment="角色汇总信息: {characters: [], voice_mappings: {}, last_updated: ''}",
               existing_nullable=True)
    op.alter_column('books', 'id',
               existing_type=sa.INTEGER(),
               comment='主键ID',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('books_id_seq'::regclass)"))
    op.alter_column('books', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='创建时间',
               existing_nullable=True)
    op.alter_column('books', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='更新时间',
               existing_nullable=True)
    op.drop_index('idx_book_status_created', table_name='books')
    op.drop_index('idx_book_title_author', table_name='books')
    op.drop_index('ix_books_created_at', table_name='books')
    op.drop_index('ix_books_id', table_name='books')
    op.drop_index('ix_books_status', table_name='books')
    op.alter_column('environment_sound_categories', 'icon',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               comment='图标',
               existing_comment='分类图标',
               existing_nullable=True)
    op.alter_column('environment_sound_categories', 'sort_order',
               existing_type=sa.INTEGER(),
               comment='排序顺序',
               existing_comment='排序权重',
               existing_nullable=True)
    op.alter_column('environment_sound_categories', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='是否激活',
               existing_comment='是否启用',
               existing_nullable=True)
    op.alter_column('environment_sound_categories', 'color',
               existing_type=sa.VARCHAR(length=7),
               type_=sa.String(length=20),
               comment='分类颜色',
               existing_nullable=True,
               existing_server_default=sa.text("'#1890ff'::character varying"))
    op.alter_column('environment_sound_categories', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True)
    op.alter_column('environment_sound_categories', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='更新时间',
               existing_nullable=True)
    op.create_index(op.f('ix_environment_sound_categories_id'), 'environment_sound_categories', ['id'], unique=False)
    op.add_column('environment_sound_favorites', sa.Column('sound_id', sa.Integer(), nullable=False, comment='环境音ID'))
    op.add_column('environment_sound_favorites', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.alter_column('environment_sound_favorites', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='收藏时间',
               existing_nullable=True)
    op.create_index(op.f('ix_environment_sound_favorites_id'), 'environment_sound_favorites', ['id'], unique=False)
    op.drop_constraint('environment_sound_favorites_environment_sound_id_fkey', 'environment_sound_favorites', type_='foreignkey')
    op.drop_column('environment_sound_favorites', 'environment_sound_id')
    op.alter_column('environment_sound_presets', 'name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               existing_comment='预设名称',
               existing_nullable=False)
    op.alter_column('environment_sound_presets', 'default_cfg_scale',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='默认CFG scale',
               existing_comment='默认CFG强度',
               existing_nullable=True)
    op.alter_column('environment_sound_presets', 'prompt_templates',
               existing_type=sa.TEXT(),
               type_=sa.JSON(),
               comment='提示词模板',
               existing_comment='提示词模板（JSON格式）',
               existing_nullable=True)
    op.alter_column('environment_sound_presets', 'example_prompts',
               existing_type=sa.TEXT(),
               type_=sa.JSON(),
               comment='示例提示词',
               existing_comment='示例提示词（JSON格式）',
               existing_nullable=True)
    op.alter_column('environment_sound_presets', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='是否激活',
               existing_comment='是否启用',
               existing_nullable=True)
    op.alter_column('environment_sound_presets', 'sort_order',
               existing_type=sa.INTEGER(),
               comment='排序',
               existing_comment='排序权重',
               existing_nullable=True)
    op.alter_column('environment_sound_presets', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True)
    op.alter_column('environment_sound_presets', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='更新时间',
               existing_nullable=True)
    op.create_index(op.f('ix_environment_sound_presets_id'), 'environment_sound_presets', ['id'], unique=False)
    op.drop_constraint('environment_sound_presets_category_id_fkey', 'environment_sound_presets', type_='foreignkey')
    op.alter_column('environment_sound_tags', 'name',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               existing_comment='标签名称',
               existing_nullable=False)
    op.alter_column('environment_sound_tags', 'description',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.Text(),
               existing_comment='标签描述',
               existing_nullable=True)
    op.alter_column('environment_sound_tags', 'color',
               existing_type=sa.VARCHAR(length=7),
               type_=sa.String(length=20),
               existing_comment='标签颜色',
               existing_nullable=True)
    op.alter_column('environment_sound_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True)
    op.create_index(op.f('ix_environment_sound_tags_id'), 'environment_sound_tags', ['id'], unique=False)
    op.add_column('environment_sound_usage_logs', sa.Column('sound_id', sa.Integer(), nullable=False, comment='环境音ID'))
    op.add_column('environment_sound_usage_logs', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.alter_column('environment_sound_usage_logs', 'action',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               comment='操作类型',
               existing_comment='操作类型：play/download/generate',
               existing_nullable=False)
    op.alter_column('environment_sound_usage_logs', 'user_agent',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.Text(),
               comment='User Agent',
               existing_comment='用户代理',
               existing_nullable=True)
    op.alter_column('environment_sound_usage_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='操作时间',
               existing_nullable=True)
    op.create_index(op.f('ix_environment_sound_usage_logs_id'), 'environment_sound_usage_logs', ['id'], unique=False)
    op.drop_constraint('environment_sound_usage_logs_environment_sound_id_fkey', 'environment_sound_usage_logs', type_='foreignkey')
    op.drop_column('environment_sound_usage_logs', 'project_id')
    op.drop_column('environment_sound_usage_logs', 'environment_sound_id')
    op.alter_column('environment_sounds', 'name',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=255),
               existing_comment='环境音名称',
               existing_nullable=False)
    op.alter_column('environment_sounds', 'description',
               existing_type=sa.TEXT(),
               comment='描述',
               existing_comment='环境音描述',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'duration',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='时长(秒)',
               existing_comment='音频时长（秒）',
               existing_nullable=False)
    op.alter_column('environment_sounds', 'steps',
               existing_type=sa.INTEGER(),
               comment='生成步数',
               existing_comment='推理步数',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'cfg_scale',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='CFG scale参数',
               existing_comment='CFG引导强度',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'file_path',
               existing_type=sa.VARCHAR(length=500),
               comment='文件路径',
               existing_comment='音频文件路径',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'file_size',
               existing_type=sa.INTEGER(),
               comment='文件大小(字节)',
               existing_comment='文件大小（字节）',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'generation_time',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='生成耗时(秒)',
               existing_comment='生成耗时（秒）',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'generation_status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               comment='生成状态',
               existing_comment='生成状态：pending/processing/completed/failed',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'tags',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               comment='标签列表',
               existing_nullable=True,
               existing_server_default=sa.text("'[]'::jsonb"))
    op.alter_column('environment_sounds', 'quality_score',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='质量评分',
               existing_comment='质量评分（1-5）',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'user_rating',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='用户评分',
               existing_comment='用户评分（1-5）',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='是否激活',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('environment_sounds', 'sort_order',
               existing_type=sa.INTEGER(),
               comment='排序顺序',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('environment_sounds', 'color',
               existing_type=sa.VARCHAR(length=7),
               comment='显示颜色',
               existing_nullable=True,
               existing_server_default=sa.text("'#1890ff'::character varying"))
    op.alter_column('environment_sounds', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='更新时间',
               existing_nullable=True)
    op.drop_index('idx_environment_sounds_is_active', table_name='environment_sounds')
    op.drop_index('idx_environment_sounds_sort_order', table_name='environment_sounds')
    op.create_index(op.f('ix_environment_sounds_id'), 'environment_sounds', ['id'], unique=False)
    op.drop_constraint('environment_sounds_category_id_fkey', 'environment_sounds', type_='foreignkey')
    op.add_column('login_logs', sa.Column('username', sa.String(length=50), nullable=True, comment='用户名'))
    op.add_column('login_logs', sa.Column('login_time', sa.DateTime(), nullable=True, comment='登录时间'))
    op.add_column('login_logs', sa.Column('updated_at', sa.DateTime(), nullable=True, comment='更新时间'))
    op.alter_column('login_logs', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment='用户ID')
    op.alter_column('login_logs', 'ip_address',
               existing_type=sa.VARCHAR(length=45),
               comment='IP地址',
               existing_nullable=True)
    op.alter_column('login_logs', 'user_agent',
               existing_type=sa.TEXT(),
               comment='用户代理',
               existing_nullable=True)
    op.alter_column('login_logs', 'success',
               existing_type=sa.BOOLEAN(),
               comment='是否成功',
               existing_nullable=False)
    op.alter_column('login_logs', 'failure_reason',
               existing_type=sa.VARCHAR(length=200),
               comment='失败原因',
               existing_nullable=True)
    op.alter_column('login_logs', 'id',
               existing_type=sa.INTEGER(),
               comment='主键ID',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('login_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='创建时间',
               existing_nullable=True)
    op.drop_column('login_logs', 'login_type')
    op.alter_column('music_generation_tasks', 'name',
               existing_type=sa.VARCHAR(length=200),
               comment='音乐名称',
               existing_nullable=False)
    op.add_column('permissions', sa.Column('module', sa.String(length=50), nullable=False, comment='所属模块'))
    op.add_column('permissions', sa.Column('updated_at', sa.DateTime(), nullable=True, comment='更新时间'))
    op.alter_column('permissions', 'code',
               existing_type=sa.VARCHAR(length=100),
               comment='权限代码',
               existing_nullable=False)
    op.alter_column('permissions', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment='权限名称',
               existing_nullable=False)
    op.alter_column('permissions', 'description',
               existing_type=sa.TEXT(),
               comment='权限描述',
               existing_nullable=True)
    op.alter_column('permissions', 'id',
               existing_type=sa.INTEGER(),
               comment='主键ID',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('permissions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='创建时间',
               existing_nullable=True)
    op.drop_index('ix_permissions_code', table_name='permissions')
    op.create_unique_constraint(None, 'permissions', ['code'])
    op.drop_column('permissions', 'category')
    op.drop_column('permissions', 'is_active')
    op.alter_column('roles', 'name',
               existing_type=sa.VARCHAR(length=50),
               comment='角色名称',
               existing_nullable=False)
    op.alter_column('roles', 'display_name',
               existing_type=sa.VARCHAR(length=100),
               comment='显示名称',
               existing_nullable=False)
    op.alter_column('roles', 'description',
               existing_type=sa.TEXT(),
               comment='角色描述',
               existing_nullable=True)
    op.alter_column('roles', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=True,
               comment='角色状态',
               existing_server_default=sa.text("'active'::character varying"))
    op.alter_column('roles', 'is_system',
               existing_type=sa.BOOLEAN(),
               comment='是否系统角色',
               existing_nullable=True)
    op.alter_column('roles', 'id',
               existing_type=sa.INTEGER(),
               comment='主键ID',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('roles_id_seq'::regclass)"))
    op.alter_column('roles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='创建时间',
               existing_nullable=True)
    op.alter_column('roles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='更新时间',
               existing_nullable=True)
    op.drop_index('ix_roles_name', table_name='roles')
    op.create_unique_constraint(None, 'roles', ['name'])
    op.drop_column('roles', 'is_active')
    op.alter_column('system_logs', 'level',
               existing_type=postgresql.ENUM('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL', name='loglevel'),
               comment='日志级别',
               existing_nullable=False)
    op.alter_column('system_logs', 'module',
               existing_type=postgresql.ENUM('SYSTEM', 'TTS', 'ANALYSIS', 'AUDIO', 'ENVIRONMENT', 'API', 'DATABASE', 'BACKUP', name='logmodule'),
               comment='模块名称',
               existing_nullable=False)
    op.alter_column('system_logs', 'message',
               existing_type=sa.TEXT(),
               comment='日志消息',
               existing_nullable=False)
    op.alter_column('system_logs', 'details',
               existing_type=sa.TEXT(),
               comment='详细信息 JSON字符串',
               existing_nullable=True)
    op.alter_column('system_logs', 'source_file',
               existing_type=sa.VARCHAR(length=255),
               comment='源文件路径',
               existing_nullable=True)
    op.alter_column('system_logs', 'source_line',
               existing_type=sa.INTEGER(),
               comment='源文件行号',
               existing_nullable=True)
    op.alter_column('system_logs', 'function',
               existing_type=sa.VARCHAR(length=100),
               comment='函数名',
               existing_nullable=True)
    op.alter_column('system_logs', 'user_id',
               existing_type=sa.VARCHAR(length=50),
               comment='用户ID',
               existing_nullable=True)
    op.alter_column('system_logs', 'session_id',
               existing_type=sa.VARCHAR(length=100),
               comment='会话ID',
               existing_nullable=True)
    op.alter_column('system_logs', 'ip_address',
               existing_type=sa.VARCHAR(length=45),
               comment='IP地址（支持IPv6）',
               existing_nullable=True)
    op.alter_column('system_logs', 'user_agent',
               existing_type=sa.VARCHAR(length=500),
               comment='用户代理',
               existing_nullable=True)
    op.create_index(op.f('ix_system_logs_id'), 'system_logs', ['id'], unique=False)
    op.create_index(op.f('ix_system_logs_level'), 'system_logs', ['level'], unique=False)
    op.create_index(op.f('ix_system_logs_module'), 'system_logs', ['module'], unique=False)
    op.create_index(op.f('ix_system_logs_session_id'), 'system_logs', ['session_id'], unique=False)
    op.create_index(op.f('ix_system_logs_user_id'), 'system_logs', ['user_id'], unique=False)
    op.drop_index('idx_text_segments_voice_profile', table_name='text_segments')
    op.drop_index('idx_text_segments_order', table_name='text_segments')
    op.create_index('idx_text_segments_order', 'text_segments', ['paragraph_index'], unique=False)
    op.drop_column('text_segments', 'segment_order')
    op.drop_column('text_segments', 'text_content')
    op.drop_column('text_segments', 'detected_speaker')
    op.drop_column('text_segments', 'voice_profile_id')
    op.add_column('usage_stats', sa.Column('metric_name', sa.String(length=100), nullable=False, comment='指标名称'))
    op.add_column('usage_stats', sa.Column('metric_value', sa.Float(), nullable=False, comment='指标值'))
    op.add_column('usage_stats', sa.Column('metric_unit', sa.String(length=50), nullable=True, comment='指标单位'))
    op.add_column('usage_stats', sa.Column('category', sa.String(length=100), nullable=True, comment='分类'))
    op.add_column('usage_stats', sa.Column('subcategory', sa.String(length=100), nullable=True, comment='子分类'))
    op.add_column('usage_stats', sa.Column('period_start', sa.DateTime(), nullable=True, comment='统计开始时间'))
    op.add_column('usage_stats', sa.Column('period_end', sa.DateTime(), nullable=True, comment='统计结束时间'))
    op.add_column('usage_stats', sa.Column('meta_data', sa.JSON(), nullable=True, comment='元数据'))
    op.add_column('usage_stats', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('usage_stats', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.drop_index('ix_usage_stats_date', table_name='usage_stats')
    op.create_index(op.f('ix_usage_stats_id'), 'usage_stats', ['id'], unique=False)
    op.drop_column('usage_stats', 'failed_requests')
    op.drop_column('usage_stats', 'audio_files_generated')
    op.drop_column('usage_stats', 'successful_requests')
    op.drop_column('usage_stats', 'date')
    op.drop_column('usage_stats', 'total_requests')
    op.drop_column('usage_stats', 'total_processing_time')
    op.add_column('user_presets', sa.Column('user_id', sa.Integer(), nullable=True, comment='创建用户ID'))
    op.add_column('user_presets', sa.Column('is_public', sa.Boolean(), nullable=True, comment='是否公开'))
    op.add_column('user_presets', sa.Column('is_system', sa.Boolean(), nullable=True, comment='是否系统预设'))
    op.add_column('user_presets', sa.Column('version', sa.String(length=20), nullable=True, comment='配置版本'))
    op.alter_column('user_presets', 'name',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=255),
               comment='预设名称',
               existing_nullable=False)
    op.alter_column('user_presets', 'description',
               existing_type=sa.TEXT(),
               comment='预设描述',
               existing_nullable=True)
    op.alter_column('user_presets', 'config_type',
               existing_type=sa.VARCHAR(length=50),
               comment='配置类型: voice_mapping, synthesis_params, analysis_params, analysis_complete',
               existing_nullable=False)
    op.alter_column('user_presets', 'config_data',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='预设配置数据JSON',
               existing_nullable=False)
    op.alter_column('user_presets', 'scope',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               comment='作用域: global, project, book',
               existing_nullable=True)
    op.alter_column('user_presets', 'scope_id',
               existing_type=sa.INTEGER(),
               comment='作用域ID（项目ID或书籍ID）',
               existing_nullable=True)
    op.alter_column('user_presets', 'usage_count',
               existing_type=sa.INTEGER(),
               comment='使用次数',
               existing_nullable=True)
    op.alter_column('user_presets', 'last_used',
               existing_type=postgresql.TIMESTAMP(),
               comment='最后使用时间',
               existing_nullable=True)
    op.drop_index('idx_user_presets_config_type', table_name='user_presets')
    op.drop_index('idx_user_presets_name_scope', table_name='user_presets')
    op.drop_index('idx_user_presets_scope', table_name='user_presets')
    op.drop_index('idx_user_presets_scope_id', table_name='user_presets')
    op.drop_index('idx_user_presets_usage_count', table_name='user_presets')
    op.create_index('idx_preset_scope_id', 'user_presets', ['scope', 'scope_id'], unique=False)
    op.create_index('idx_preset_type_scope', 'user_presets', ['config_type', 'scope'], unique=False)
    op.create_index('idx_preset_usage', 'user_presets', ['usage_count'], unique=False)
    op.create_index('idx_preset_user_type', 'user_presets', ['user_id', 'config_type'], unique=False)
    op.add_column('user_sessions', sa.Column('token_id', sa.String(length=255), nullable=False, comment='Token ID'))
    op.add_column('user_sessions', sa.Column('revoked_at', sa.DateTime(), nullable=True, comment='撤销时间'))
    op.add_column('user_sessions', sa.Column('updated_at', sa.DateTime(), nullable=True, comment='更新时间'))
    op.alter_column('user_sessions', 'user_id',
               existing_type=sa.INTEGER(),
               comment='用户ID',
               existing_nullable=False)
    op.alter_column('user_sessions', 'ip_address',
               existing_type=sa.VARCHAR(length=45),
               comment='IP地址',
               existing_nullable=True)
    op.alter_column('user_sessions', 'user_agent',
               existing_type=sa.TEXT(),
               comment='用户代理',
               existing_nullable=True)
    op.alter_column('user_sessions', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='过期时间',
               existing_nullable=False)
    op.alter_column('user_sessions', 'id',
               existing_type=sa.INTEGER(),
               comment='主键ID',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('user_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='创建时间',
               existing_nullable=True)
    op.drop_index('ix_user_sessions_refresh_token', table_name='user_sessions')
    op.drop_index('ix_user_sessions_session_token', table_name='user_sessions')
    op.create_unique_constraint(None, 'user_sessions', ['token_id'])
    op.drop_column('user_sessions', 'last_used')
    op.drop_column('user_sessions', 'is_active')
    op.drop_column('user_sessions', 'session_token')
    op.drop_column('user_sessions', 'refresh_token')
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(length=50),
               comment='用户名',
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               nullable=False,
               comment='邮箱')
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(length=255),
               nullable=False,
               comment='密码哈希')
    op.alter_column('users', 'full_name',
               existing_type=sa.VARCHAR(length=100),
               comment='真实姓名',
               existing_nullable=True)
    op.alter_column('users', 'avatar_url',
               existing_type=sa.VARCHAR(length=500),
               comment='头像URL',
               existing_nullable=True)
    op.alter_column('users', 'status',
               existing_type=sa.VARCHAR(length=20),
               comment='用户状态',
               existing_nullable=True,
               existing_server_default=sa.text("'active'::character varying"))
    op.alter_column('users', 'is_verified',
               existing_type=sa.BOOLEAN(),
               comment='是否已验证邮箱',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'is_superuser',
               existing_type=sa.BOOLEAN(),
               comment='是否超级管理员',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'daily_quota',
               existing_type=sa.INTEGER(),
               comment='每日TTS配额',
               existing_nullable=True,
               existing_server_default=sa.text('1000'))
    op.alter_column('users', 'used_quota',
               existing_type=sa.INTEGER(),
               comment='已使用配额',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('users', 'quota_reset_date',
               existing_type=postgresql.TIMESTAMP(),
               comment='配额重置日期',
               existing_nullable=True)
    op.alter_column('users', 'last_login',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               comment='最后登录时间',
               existing_nullable=True)
    op.alter_column('users', 'id',
               existing_type=sa.INTEGER(),
               comment='主键ID',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               comment='创建时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               comment='更新时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_users_created_at', table_name='users')
    op.drop_index('idx_users_email', table_name='users')
    op.drop_index('idx_users_status', table_name='users')
    op.drop_index('idx_users_username', table_name='users')
    op.drop_constraint('unique_email', 'users', type_='unique')
    op.drop_constraint('unique_username', 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.drop_column('users', 'is_active')
    op.alter_column('voice_profiles', 'name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               comment='声音名称',
               existing_nullable=False)
    op.alter_column('voice_profiles', 'description',
               existing_type=sa.TEXT(),
               comment='描述',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'type',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               nullable=True,
               comment='类型: male, female, child, elder, custom')
    op.alter_column('voice_profiles', 'color',
               existing_type=sa.VARCHAR(length=20),
               comment='显示颜色',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'reference_audio_path',
               existing_type=sa.VARCHAR(length=500),
               comment='参考音频路径',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'latent_file_path',
               existing_type=sa.VARCHAR(length=500),
               comment='latent文件路径',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'parameters',
               existing_type=sa.TEXT(),
               type_=sa.JSON(),
               comment='TTS参数配置',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'tags',
               existing_type=sa.TEXT(),
               type_=sa.JSON(),
               comment='标签',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               comment='状态: active, inactive, training',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'quality_score',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='质量评分',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'usage_count',
               existing_type=sa.INTEGER(),
               comment='使用次数',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'id',
               existing_type=sa.INTEGER(),
               comment='主键ID',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('voice_profiles_id_seq'::regclass)"))
    op.alter_column('voice_profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='创建时间',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='更新时间',
               existing_nullable=True)
    op.drop_index('ix_voice_profiles_id', table_name='voice_profiles')
    op.drop_column('voice_profiles', 'sample_audio_path')
    op.drop_column('voice_profiles', 'last_used')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('voice_profiles', sa.Column('last_used', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('voice_profiles', sa.Column('sample_audio_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.create_index('ix_voice_profiles_id', 'voice_profiles', ['id'], unique=False)
    op.alter_column('voice_profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='更新时间',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='主键ID',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('voice_profiles_id_seq'::regclass)"))
    op.alter_column('voice_profiles', 'usage_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='使用次数',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'quality_score',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='质量评分',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'status',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='状态: active, inactive, training',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'tags',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               comment=None,
               existing_comment='标签',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'parameters',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               comment=None,
               existing_comment='TTS参数配置',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'latent_file_path',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='latent文件路径',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'reference_audio_path',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='参考音频路径',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'color',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='显示颜色',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'type',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               nullable=False,
               comment=None,
               existing_comment='类型: male, female, child, elder, custom')
    op.alter_column('voice_profiles', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='描述',
               existing_nullable=True)
    op.alter_column('voice_profiles', 'name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='声音名称',
               existing_nullable=False)
    op.add_column('users', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint('unique_username', 'users', ['username'])
    op.create_unique_constraint('unique_email', 'users', ['email'])
    op.create_index('idx_users_username', 'users', ['username'], unique=False)
    op.create_index('idx_users_status', 'users', ['status'], unique=False)
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.create_index('idx_users_created_at', 'users', ['created_at'], unique=False)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='更新时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='主键ID',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
    op.alter_column('users', 'last_login',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='最后登录时间',
               existing_nullable=True)
    op.alter_column('users', 'quota_reset_date',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='配额重置日期',
               existing_nullable=True)
    op.alter_column('users', 'used_quota',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='已使用配额',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('users', 'daily_quota',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='每日TTS配额',
               existing_nullable=True,
               existing_server_default=sa.text('1000'))
    op.alter_column('users', 'is_superuser',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否超级管理员',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'is_verified',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否已验证邮箱',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'status',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='用户状态',
               existing_nullable=True,
               existing_server_default=sa.text("'active'::character varying"))
    op.alter_column('users', 'avatar_url',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='头像URL',
               existing_nullable=True)
    op.alter_column('users', 'full_name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='真实姓名',
               existing_nullable=True)
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(length=255),
               nullable=True,
               comment=None,
               existing_comment='密码哈希')
    op.alter_column('users', 'email',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               nullable=True,
               comment=None,
               existing_comment='邮箱')
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='用户名',
               existing_nullable=False)
    op.add_column('user_sessions', sa.Column('refresh_token', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('user_sessions', sa.Column('session_token', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('user_sessions', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_sessions', sa.Column('last_used', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'user_sessions', type_='unique')
    op.create_index('ix_user_sessions_session_token', 'user_sessions', ['session_token'], unique=False)
    op.create_index('ix_user_sessions_refresh_token', 'user_sessions', ['refresh_token'], unique=False)
    op.alter_column('user_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True)
    op.alter_column('user_sessions', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='主键ID',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('user_sessions', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='过期时间',
               existing_nullable=False)
    op.alter_column('user_sessions', 'user_agent',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='用户代理',
               existing_nullable=True)
    op.alter_column('user_sessions', 'ip_address',
               existing_type=sa.VARCHAR(length=45),
               comment=None,
               existing_comment='IP地址',
               existing_nullable=True)
    op.alter_column('user_sessions', 'user_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='用户ID',
               existing_nullable=False)
    op.drop_column('user_sessions', 'updated_at')
    op.drop_column('user_sessions', 'revoked_at')
    op.drop_column('user_sessions', 'token_id')
    op.drop_index('idx_preset_user_type', table_name='user_presets')
    op.drop_index('idx_preset_usage', table_name='user_presets')
    op.drop_index('idx_preset_type_scope', table_name='user_presets')
    op.drop_index('idx_preset_scope_id', table_name='user_presets')
    op.create_index('idx_user_presets_usage_count', 'user_presets', ['usage_count'], unique=False)
    op.create_index('idx_user_presets_scope_id', 'user_presets', ['scope_id'], unique=False)
    op.create_index('idx_user_presets_scope', 'user_presets', ['scope'], unique=False)
    op.create_index('idx_user_presets_name_scope', 'user_presets', ['name', 'scope', 'scope_id'], unique=False)
    op.create_index('idx_user_presets_config_type', 'user_presets', ['config_type'], unique=False)
    op.alter_column('user_presets', 'last_used',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='最后使用时间',
               existing_nullable=True)
    op.alter_column('user_presets', 'usage_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='使用次数',
               existing_nullable=True)
    op.alter_column('user_presets', 'scope_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='作用域ID（项目ID或书籍ID）',
               existing_nullable=True)
    op.alter_column('user_presets', 'scope',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='作用域: global, project, book',
               existing_nullable=True)
    op.alter_column('user_presets', 'config_data',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='预设配置数据JSON',
               existing_nullable=False)
    op.alter_column('user_presets', 'config_type',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='配置类型: voice_mapping, synthesis_params, analysis_params, analysis_complete',
               existing_nullable=False)
    op.alter_column('user_presets', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='预设描述',
               existing_nullable=True)
    op.alter_column('user_presets', 'name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='预设名称',
               existing_nullable=False)
    op.drop_column('user_presets', 'version')
    op.drop_column('user_presets', 'is_system')
    op.drop_column('user_presets', 'is_public')
    op.drop_column('user_presets', 'user_id')
    op.add_column('usage_stats', sa.Column('total_processing_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('usage_stats', sa.Column('total_requests', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('usage_stats', sa.Column('date', sa.VARCHAR(length=10), autoincrement=False, nullable=False))
    op.add_column('usage_stats', sa.Column('successful_requests', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('usage_stats', sa.Column('audio_files_generated', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('usage_stats', sa.Column('failed_requests', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_usage_stats_id'), table_name='usage_stats')
    op.create_index('ix_usage_stats_date', 'usage_stats', ['date'], unique=False)
    op.drop_column('usage_stats', 'updated_at')
    op.drop_column('usage_stats', 'created_at')
    op.drop_column('usage_stats', 'meta_data')
    op.drop_column('usage_stats', 'period_end')
    op.drop_column('usage_stats', 'period_start')
    op.drop_column('usage_stats', 'subcategory')
    op.drop_column('usage_stats', 'category')
    op.drop_column('usage_stats', 'metric_unit')
    op.drop_column('usage_stats', 'metric_value')
    op.drop_column('usage_stats', 'metric_name')
    op.add_column('text_segments', sa.Column('voice_profile_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('text_segments', sa.Column('detected_speaker', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('text_segments', sa.Column('text_content', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=False))
    op.add_column('text_segments', sa.Column('segment_order', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_index('idx_text_segments_order', table_name='text_segments')
    op.create_index('idx_text_segments_order', 'text_segments', ['segment_order'], unique=False)
    op.create_index('idx_text_segments_voice_profile', 'text_segments', ['voice_profile_id'], unique=False)
    op.drop_index(op.f('ix_system_logs_user_id'), table_name='system_logs')
    op.drop_index(op.f('ix_system_logs_session_id'), table_name='system_logs')
    op.drop_index(op.f('ix_system_logs_module'), table_name='system_logs')
    op.drop_index(op.f('ix_system_logs_level'), table_name='system_logs')
    op.drop_index(op.f('ix_system_logs_id'), table_name='system_logs')
    op.alter_column('system_logs', 'user_agent',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='用户代理',
               existing_nullable=True)
    op.alter_column('system_logs', 'ip_address',
               existing_type=sa.VARCHAR(length=45),
               comment=None,
               existing_comment='IP地址（支持IPv6）',
               existing_nullable=True)
    op.alter_column('system_logs', 'session_id',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='会话ID',
               existing_nullable=True)
    op.alter_column('system_logs', 'user_id',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='用户ID',
               existing_nullable=True)
    op.alter_column('system_logs', 'function',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='函数名',
               existing_nullable=True)
    op.alter_column('system_logs', 'source_line',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='源文件行号',
               existing_nullable=True)
    op.alter_column('system_logs', 'source_file',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='源文件路径',
               existing_nullable=True)
    op.alter_column('system_logs', 'details',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='详细信息 JSON字符串',
               existing_nullable=True)
    op.alter_column('system_logs', 'message',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='日志消息',
               existing_nullable=False)
    op.alter_column('system_logs', 'module',
               existing_type=postgresql.ENUM('SYSTEM', 'TTS', 'ANALYSIS', 'AUDIO', 'ENVIRONMENT', 'API', 'DATABASE', 'BACKUP', name='logmodule'),
               comment=None,
               existing_comment='模块名称',
               existing_nullable=False)
    op.alter_column('system_logs', 'level',
               existing_type=postgresql.ENUM('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL', name='loglevel'),
               comment=None,
               existing_comment='日志级别',
               existing_nullable=False)
    op.add_column('roles', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'roles', type_='unique')
    op.create_index('ix_roles_name', 'roles', ['name'], unique=False)
    op.alter_column('roles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='更新时间',
               existing_nullable=True)
    op.alter_column('roles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True)
    op.alter_column('roles', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='主键ID',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('roles_id_seq'::regclass)"))
    op.alter_column('roles', 'is_system',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否系统角色',
               existing_nullable=True)
    op.alter_column('roles', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=False,
               comment=None,
               existing_comment='角色状态',
               existing_server_default=sa.text("'active'::character varying"))
    op.alter_column('roles', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='角色描述',
               existing_nullable=True)
    op.alter_column('roles', 'display_name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='显示名称',
               existing_nullable=False)
    op.alter_column('roles', 'name',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='角色名称',
               existing_nullable=False)
    op.add_column('permissions', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('permissions', sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'permissions', type_='unique')
    op.create_index('ix_permissions_code', 'permissions', ['code'], unique=False)
    op.alter_column('permissions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True)
    op.alter_column('permissions', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='主键ID',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('permissions', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='权限描述',
               existing_nullable=True)
    op.alter_column('permissions', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='权限名称',
               existing_nullable=False)
    op.alter_column('permissions', 'code',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='权限代码',
               existing_nullable=False)
    op.drop_column('permissions', 'updated_at')
    op.drop_column('permissions', 'module')
    op.alter_column('music_generation_tasks', 'name',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='音乐名称',
               existing_nullable=False)
    op.add_column('login_logs', sa.Column('login_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.alter_column('login_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True)
    op.alter_column('login_logs', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='主键ID',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('login_logs', 'failure_reason',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='失败原因',
               existing_nullable=True)
    op.alter_column('login_logs', 'success',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否成功',
               existing_nullable=False)
    op.alter_column('login_logs', 'user_agent',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='用户代理',
               existing_nullable=True)
    op.alter_column('login_logs', 'ip_address',
               existing_type=sa.VARCHAR(length=45),
               comment=None,
               existing_comment='IP地址',
               existing_nullable=True)
    op.alter_column('login_logs', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment=None,
               existing_comment='用户ID')
    op.drop_column('login_logs', 'updated_at')
    op.drop_column('login_logs', 'login_time')
    op.drop_column('login_logs', 'username')
    op.create_foreign_key('environment_sounds_category_id_fkey', 'environment_sounds', 'environment_sound_categories', ['category_id'], ['id'])
    op.drop_index(op.f('ix_environment_sounds_id'), table_name='environment_sounds')
    op.create_index('idx_environment_sounds_sort_order', 'environment_sounds', ['sort_order'], unique=False)
    op.create_index('idx_environment_sounds_is_active', 'environment_sounds', ['is_active'], unique=False)
    op.alter_column('environment_sounds', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='更新时间',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='创建时间',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'color',
               existing_type=sa.VARCHAR(length=7),
               comment=None,
               existing_comment='显示颜色',
               existing_nullable=True,
               existing_server_default=sa.text("'#1890ff'::character varying"))
    op.alter_column('environment_sounds', 'sort_order',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='排序顺序',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('environment_sounds', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否激活',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('environment_sounds', 'user_rating',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='用户评分（1-5）',
               existing_comment='用户评分',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'quality_score',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='质量评分（1-5）',
               existing_comment='质量评分',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'tags',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='标签列表',
               existing_nullable=True,
               existing_server_default=sa.text("'[]'::jsonb"))
    op.alter_column('environment_sounds', 'generation_status',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               comment='生成状态：pending/processing/completed/failed',
               existing_comment='生成状态',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'generation_time',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='生成耗时（秒）',
               existing_comment='生成耗时(秒)',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'file_size',
               existing_type=sa.INTEGER(),
               comment='文件大小（字节）',
               existing_comment='文件大小(字节)',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'file_path',
               existing_type=sa.VARCHAR(length=500),
               comment='音频文件路径',
               existing_comment='文件路径',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'cfg_scale',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='CFG引导强度',
               existing_comment='CFG scale参数',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'steps',
               existing_type=sa.INTEGER(),
               comment='推理步数',
               existing_comment='生成步数',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'duration',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='音频时长（秒）',
               existing_comment='时长(秒)',
               existing_nullable=False)
    op.alter_column('environment_sounds', 'description',
               existing_type=sa.TEXT(),
               comment='环境音描述',
               existing_comment='描述',
               existing_nullable=True)
    op.alter_column('environment_sounds', 'name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=200),
               existing_comment='环境音名称',
               existing_nullable=False)
    op.add_column('environment_sound_usage_logs', sa.Column('environment_sound_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('environment_sound_usage_logs', sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='关联项目ID（如果有）'))
    op.create_foreign_key('environment_sound_usage_logs_environment_sound_id_fkey', 'environment_sound_usage_logs', 'environment_sounds', ['environment_sound_id'], ['id'])
    op.drop_index(op.f('ix_environment_sound_usage_logs_id'), table_name='environment_sound_usage_logs')
    op.alter_column('environment_sound_usage_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='操作时间',
               existing_nullable=True)
    op.alter_column('environment_sound_usage_logs', 'user_agent',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=500),
               comment='用户代理',
               existing_comment='User Agent',
               existing_nullable=True)
    op.alter_column('environment_sound_usage_logs', 'action',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               comment='操作类型：play/download/generate',
               existing_comment='操作类型',
               existing_nullable=False)
    op.drop_column('environment_sound_usage_logs', 'updated_at')
    op.drop_column('environment_sound_usage_logs', 'sound_id')
    op.drop_index(op.f('ix_environment_sound_tags_id'), table_name='environment_sound_tags')
    op.alter_column('environment_sound_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='创建时间',
               existing_nullable=True)
    op.alter_column('environment_sound_tags', 'color',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=7),
               existing_comment='标签颜色',
               existing_nullable=True)
    op.alter_column('environment_sound_tags', 'description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=200),
               existing_comment='标签描述',
               existing_nullable=True)
    op.alter_column('environment_sound_tags', 'name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               existing_comment='标签名称',
               existing_nullable=False)
    op.create_foreign_key('environment_sound_presets_category_id_fkey', 'environment_sound_presets', 'environment_sound_categories', ['category_id'], ['id'])
    op.drop_index(op.f('ix_environment_sound_presets_id'), table_name='environment_sound_presets')
    op.alter_column('environment_sound_presets', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='更新时间',
               existing_nullable=True)
    op.alter_column('environment_sound_presets', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='创建时间',
               existing_nullable=True)
    op.alter_column('environment_sound_presets', 'sort_order',
               existing_type=sa.INTEGER(),
               comment='排序权重',
               existing_comment='排序',
               existing_nullable=True)
    op.alter_column('environment_sound_presets', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='是否启用',
               existing_comment='是否激活',
               existing_nullable=True)
    op.alter_column('environment_sound_presets', 'example_prompts',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               comment='示例提示词（JSON格式）',
               existing_comment='示例提示词',
               existing_nullable=True)
    op.alter_column('environment_sound_presets', 'prompt_templates',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               comment='提示词模板（JSON格式）',
               existing_comment='提示词模板',
               existing_nullable=True)
    op.alter_column('environment_sound_presets', 'default_cfg_scale',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='默认CFG强度',
               existing_comment='默认CFG scale',
               existing_nullable=True)
    op.alter_column('environment_sound_presets', 'name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               existing_comment='预设名称',
               existing_nullable=False)
    op.add_column('environment_sound_favorites', sa.Column('environment_sound_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key('environment_sound_favorites_environment_sound_id_fkey', 'environment_sound_favorites', 'environment_sounds', ['environment_sound_id'], ['id'])
    op.drop_index(op.f('ix_environment_sound_favorites_id'), table_name='environment_sound_favorites')
    op.alter_column('environment_sound_favorites', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='收藏时间',
               existing_nullable=True)
    op.drop_column('environment_sound_favorites', 'updated_at')
    op.drop_column('environment_sound_favorites', 'sound_id')
    op.drop_index(op.f('ix_environment_sound_categories_id'), table_name='environment_sound_categories')
    op.alter_column('environment_sound_categories', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='更新时间',
               existing_nullable=True)
    op.alter_column('environment_sound_categories', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='创建时间',
               existing_nullable=True)
    op.alter_column('environment_sound_categories', 'color',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=7),
               comment=None,
               existing_comment='分类颜色',
               existing_nullable=True,
               existing_server_default=sa.text("'#1890ff'::character varying"))
    op.alter_column('environment_sound_categories', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='是否启用',
               existing_comment='是否激活',
               existing_nullable=True)
    op.alter_column('environment_sound_categories', 'sort_order',
               existing_type=sa.INTEGER(),
               comment='排序权重',
               existing_comment='排序顺序',
               existing_nullable=True)
    op.alter_column('environment_sound_categories', 'icon',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               comment='分类图标',
               existing_comment='图标',
               existing_nullable=True)
    op.create_index('ix_books_status', 'books', ['status'], unique=False)
    op.create_index('ix_books_id', 'books', ['id'], unique=False)
    op.create_index('ix_books_created_at', 'books', ['created_at'], unique=False)
    op.create_index('idx_book_title_author', 'books', ['title', 'author'], unique=False)
    op.create_index('idx_book_status_created', 'books', ['status', 'created_at'], unique=False)
    op.alter_column('books', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='更新时间',
               existing_nullable=True)
    op.alter_column('books', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True)
    op.alter_column('books', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='主键ID',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('books_id_seq'::regclass)"))
    op.alter_column('books', 'character_summary',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment="角色汇总信息: {characters: [], voice_mappings: {}, last_updated: ''}",
               existing_nullable=True)
    op.alter_column('books', 'source_file_name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='源文件名',
               existing_nullable=True)
    op.alter_column('books', 'source_file_path',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='源文件路径',
               existing_nullable=True)
    op.alter_column('books', 'chapter_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='章节数',
               existing_nullable=True)
    op.alter_column('books', 'word_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='字数',
               existing_nullable=True)
    op.alter_column('books', 'tags',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='标签JSON',
               existing_nullable=True)
    op.alter_column('books', 'status',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='状态: draft, published, archived',
               existing_nullable=True)
    op.alter_column('books', 'chapters_data',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='章节数据',
               existing_nullable=True)
    op.alter_column('books', 'content',
               existing_type=sa.TEXT(),
               nullable=False,
               comment=None,
               existing_comment='书籍内容')
    op.alter_column('books', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='描述',
               existing_nullable=True)
    op.alter_column('books', 'author',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='作者',
               existing_nullable=True)
    op.alter_column('books', 'title',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='书籍标题',
               existing_nullable=False)
    op.create_index('idx_book_chapters_character_count', 'book_chapters', ['character_count'], unique=False)
    op.alter_column('book_chapters', 'character_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='字符数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.drop_constraint(None, 'audio_files', type_='foreignkey')
    op.create_foreign_key('audio_files_segment_id_fkey', 'audio_files', 'text_segments', ['segment_id'], ['id'])
    op.create_index('ix_audio_files_id', 'audio_files', ['id'], unique=False)
    op.create_index('idx_audio_files_project_id', 'audio_files', ['project_id'], unique=False)
    op.create_index('idx_audio_files_chapter_id', 'audio_files', ['chapter_id'], unique=False)
    op.create_index('idx_audio_files_audio_type', 'audio_files', ['audio_type'], unique=False)
    op.alter_column('audio_files', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='更新时间',
               existing_nullable=True)
    op.alter_column('audio_files', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True)
    op.alter_column('audio_files', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='主键ID',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('audio_files', 'status',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='状态: active, archived, deleted',
               existing_nullable=True)
    op.alter_column('audio_files', 'parameters',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='处理参数',
               existing_nullable=True)
    op.alter_column('audio_files', 'model_used',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='使用的模型',
               existing_nullable=True)
    op.alter_column('audio_files', 'processing_time',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='处理时间(秒)',
               existing_nullable=True)
    op.alter_column('audio_files', 'tags',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='标签',
               existing_nullable=True)
    op.alter_column('audio_files', 'is_favorite',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否收藏',
               existing_nullable=True)
    op.alter_column('audio_files', 'file_metadata',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='文件元数据',
               existing_nullable=True)
    op.alter_column('audio_files', 'channels',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='声道数',
               existing_nullable=True)
    op.alter_column('audio_files', 'sample_rate',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='采样率',
               existing_nullable=True)
    op.alter_column('audio_files', 'audio_type',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='音频类型: segment, final, environment',
               existing_nullable=True)
    op.alter_column('audio_files', 'text_content',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='文本内容',
               existing_nullable=True)
    op.alter_column('audio_files', 'voice_profile_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='声音档案ID',
               existing_nullable=True)
    op.alter_column('audio_files', 'paragraph_index',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='段落索引',
               existing_nullable=True)
    op.alter_column('audio_files', 'speaker',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='说话人',
               existing_nullable=True)
    op.alter_column('audio_files', 'character_name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='角色名',
               existing_nullable=True)
    op.alter_column('audio_files', 'segment_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='段落ID',
               existing_nullable=True)
    op.alter_column('audio_files', 'chapter_number',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='章节号',
               existing_nullable=True)
    op.alter_column('audio_files', 'chapter_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='章节ID',
               existing_nullable=True)
    op.alter_column('audio_files', 'project_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='项目ID',
               existing_nullable=True)
    op.alter_column('audio_files', 'type',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='音频类型',
               existing_nullable=True)
    op.alter_column('audio_files', 'duration',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='音频时长(秒)',
               existing_nullable=True)
    op.alter_column('audio_files', 'file_size',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               comment=None,
               existing_comment='文件大小(字节)',
               existing_nullable=True)
    op.alter_column('audio_files', 'file_path',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='文件路径',
               existing_nullable=False)
    op.alter_column('audio_files', 'original_name',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='原始文件名',
               existing_nullable=True)
    op.alter_column('audio_files', 'filename',
               existing_type=sa.VARCHAR(length=255),
               nullable=True,
               comment=None,
               existing_comment='文件名')
    op.create_table('system_logs_backup',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('source_file', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('source_line', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('function', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('reader_projects',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('reader_projects_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('total_chapters', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('completed_chapters', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='reader_projects_pkey'),
    sa.UniqueConstraint('name', name='unique_project_name'),
    postgresql_ignore_search_path=False
    )
    op.create_table('editor_settings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('zoom_level', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('playhead_position', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('visible_tracks', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    sa.Column('timeline_settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ui_settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['audio_video_projects.id'], name='editor_settings_project_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='editor_settings_pkey')
    )
    op.create_index('ix_editor_settings_project_id', 'editor_settings', ['project_id'], unique=False)
    op.create_index('ix_editor_settings_id', 'editor_settings', ['id'], unique=False)
    op.create_table('environment_track_configs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('segment_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('track_index', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('scene_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('environment_keywords', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('inheritance_applied', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('inherited_environment', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('previous_track_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('manual_edits', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('validation_status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('validation_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('validation_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('matching_suggestions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('selected_tangoflux_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('final_prompt', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('fade_in', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('3.0'), autoincrement=False, nullable=True),
    sa.Column('fade_out', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('2.0'), autoincrement=False, nullable=True),
    sa.Column('volume', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.6'), autoincrement=False, nullable=True),
    sa.Column('loop_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['previous_track_id'], ['environment_track_configs.id'], name='fk_environment_track_configs_previous_track_id'),
    sa.ForeignKeyConstraint(['session_id'], ['environment_generation_sessions.id'], name='fk_environment_track_configs_session_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='environment_track_configs_pkey')
    )
    op.create_index('idx_environment_track_configs_validation_status', 'environment_track_configs', ['validation_status'], unique=False)
    op.create_index('idx_environment_track_configs_track_index', 'environment_track_configs', ['track_index'], unique=False)
    op.create_index('idx_environment_track_configs_session_id', 'environment_track_configs', ['session_id'], unique=False)
    op.create_index('idx_environment_track_configs_segment_id', 'environment_track_configs', ['segment_id'], unique=False)
    op.create_table('editor_tracks',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('editor_tracks_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('track_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('track_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('track_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_muted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_solo', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('volume', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('pan', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('track_color', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('track_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['audio_video_projects.id'], name='editor_tracks_project_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='editor_tracks_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_editor_tracks_track_order', 'editor_tracks', ['track_order'], unique=False)
    op.create_index('ix_editor_tracks_project_id', 'editor_tracks', ['project_id'], unique=False)
    op.create_index('ix_editor_tracks_id', 'editor_tracks', ['id'], unique=False)
    op.create_table('environment_generation_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('log_level', sa.VARCHAR(length=20), server_default=sa.text("'INFO'::character varying"), autoincrement=False, nullable=True),
    sa.Column('log_message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('log_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('operation', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['environment_generation_sessions.id'], name='environment_generation_logs_session_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='environment_generation_logs_pkey')
    )
    op.create_index('idx_environment_generation_logs_session_id', 'environment_generation_logs', ['session_id'], unique=False)
    op.create_table('environment_sound_tag_relations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('environment_sound_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='关联时间'),
    sa.ForeignKeyConstraint(['environment_sound_id'], ['environment_sounds.id'], name='environment_sound_tag_relations_environment_sound_id_fkey'),
    sa.ForeignKeyConstraint(['tag_id'], ['environment_sound_tags.id'], name='environment_sound_tag_relations_tag_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='environment_sound_tag_relations_pkey')
    )
    op.create_table('voice_characters',
    sa.Column('id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('gender', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('age_range', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('quality_score', sa.REAL(), server_default=sa.text('0.0'), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('audio_sample_path', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('book_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('chapter_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='voice_characters_pkey'),
    sa.UniqueConstraint('name', name='unique_character_name')
    )
    op.create_table('task_queue',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('task_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('progress', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='task_queue_pkey')
    )
    op.create_table('audio_video_projects',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('audio_video_projects_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source_project_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('project_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('project_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('total_duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['source_project_id'], ['novel_projects.id'], name='audio_video_projects_source_project_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='audio_video_projects_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_audio_video_projects_status', 'audio_video_projects', ['status'], unique=False)
    op.create_index('ix_audio_video_projects_name', 'audio_video_projects', ['name'], unique=False)
    op.create_index('ix_audio_video_projects_id', 'audio_video_projects', ['id'], unique=False)
    op.create_index('ix_audio_video_projects_created_at', 'audio_video_projects', ['created_at'], unique=False)
    op.create_table('audio_clips',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('track_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('clip_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('original_file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('start_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('end_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('source_start', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('source_end', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('volume', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('fade_in', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('fade_out', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('effects', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('clip_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['track_id'], ['editor_tracks.id'], name='audio_clips_track_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='audio_clips_pkey')
    )
    op.create_index('ix_audio_clips_track_id', 'audio_clips', ['track_id'], unique=False)
    op.create_index('ix_audio_clips_start_time', 'audio_clips', ['start_time'], unique=False)
    op.create_index('ix_audio_clips_id', 'audio_clips', ['id'], unique=False)
    op.create_index('ix_audio_clips_end_time', 'audio_clips', ['end_time'], unique=False)
    op.create_table('environment_generation_sessions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('environment_generation_sessions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('chapter_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('session_status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('analysis_result', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('analysis_stats', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('analysis_timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('validation_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('validation_summary', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('validation_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('persistence_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('persistence_summary', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('persistence_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='environment_generation_sessions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_environment_generation_sessions_project_id', 'environment_generation_sessions', ['project_id'], unique=False)
    op.create_index('idx_environment_generation_sessions_chapter_id', 'environment_generation_sessions', ['chapter_id'], unique=False)
    op.create_table('characters',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('voice_profile', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('voice_config', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('book_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('chapter_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['book_id'], ['books.id'], name='characters_book_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['chapter_id'], ['book_chapters.id'], name='characters_chapter_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_characters_user_id_users', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='characters_pkey')
    )
    op.create_index('ix_characters_id', 'characters', ['id'], unique=False)
    op.create_table('render_tasks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('task_status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('progress', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('task_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('result_file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['audio_video_projects.id'], name='render_tasks_project_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='render_tasks_pkey')
    )
    op.create_index('ix_render_tasks_task_status', 'render_tasks', ['task_status'], unique=False)
    op.create_index('ix_render_tasks_project_id', 'render_tasks', ['project_id'], unique=False)
    op.create_index('ix_render_tasks_id', 'render_tasks', ['id'], unique=False)
    op.create_index('ix_render_tasks_created_at', 'render_tasks', ['created_at'], unique=False)
    op.create_table('environment_audio_mixing_jobs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('job_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('input_files', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('output_file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('mixing_params', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('job_status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('chapter_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('progress', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True),
    sa.Column('mixing_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('total_tracks', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('completed_tracks', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('failed_tracks', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('output_duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['environment_generation_sessions.id'], name='environment_audio_mixing_jobs_session_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='environment_audio_mixing_jobs_pkey')
    )
    op.create_index('idx_environment_audio_mixing_jobs_session_id', 'environment_audio_mixing_jobs', ['session_id'], unique=False)
    op.create_table('system_config',
    sa.Column('key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('key', name='system_config_pkey')
    )
    op.create_table('chapters',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('chapter_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('characters', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['reader_projects.id'], name='chapters_project_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='chapters_pkey'),
    sa.UniqueConstraint('project_id', 'chapter_number', name='unique_project_chapter')
    )
    # ### end Alembic commands ### 