services:
  # MongoDB数据库
  mongodb:
    image: mongo:7.0
    container_name: ai-sound-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=ai_sound
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init:/docker-entrypoint-initdb.d
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端API服务
  api:
    build:
      context: ..
      dockerfile: ./services/api/Dockerfile
    image: ai-sound-api:latest
    command: ["python3", "src/main.py", "--host", "0.0.0.0", "--port", "9930"]
    ports:
      - "9930:9930"
    volumes:
      - ../data/output:/app/output
      - ../data/temp:/app/data
      - ../MegaTTS/MegaTTS3:/app/MegaTTS3
    environment:
      - OUTPUT_DIR=/app/output
      - API_HOST=0.0.0.0
      - API_PORT=9930
      - PYTHONPATH=/app:/app/MegaTTS3
      # 添加引擎服务URL配置
      - MEGATTS3_URL=http://host.docker.internal:7929
      - ESPNET_URL=http://espnet-service:9001
      - BERTVITS2_URL=http://bert-vits2-service:9932
      # MongoDB配置
      - DB_HOST=mongodb
      - DB_PORT=27017
      - DB_DATABASE=ai_sound
      - DB_USERNAME=admin
      - DB_PASSWORD=admin123
    depends_on:
      - mongodb
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9930/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  # Web前端管理界面
  web-admin:
    build: ./web-admin
    image: ai-sound-web-admin:latest
    ports:
      - "8080:80"
    environment:
      - VITE_API_BASE_URL=http://localhost:9930
    depends_on:
      - api
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Bert-VITS2 TTS引擎
  bert-vits2:
    build:
      context: ../MegaTTS/Style-Bert-VITS2
      dockerfile: Dockerfile
    image: ai-sound-bert-vits2:latest
    container_name: bert-vits2-service
    ports:
      - "9932:9932"
    volumes:
      - ../models/bert-vits2:/app/model_assets
      - ../data/bert-vits2:/app/Data
      - ../logs/bert-vits2:/app/logs
    environment:
      - PYTHONPATH=/app
      - CUDA_VISIBLE_DEVICES=""
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9932/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ESPnet TTS引擎
  espnet:
    build:
      context: ../MegaTTS/espnet
      dockerfile: dockerfile
    image: ai-sound-espnet:latest
    container_name: espnet-service
    ports:
      - "9001:9001"
    volumes:
      - ../MegaTTS/espnet:/workspace
      - ../models/espnet:/workspace/models
      - ../data/espnet:/workspace/data
      - ../logs/espnet:/workspace/logs
    environment:
      - PYTHONPATH=/workspace
      - CUDA_VISIBLE_DEVICES=""
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# 数据卷配置
volumes:
  mongodb_data:
    driver: local

# 网络配置
networks:
  default:
    name: ai-sound-network
    driver: bridge