version: '3.8'

services:
  # Nginx反向代理服务
  nginx:
    image: nginx:alpine
    container_name: ai-sound-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./data/audio:/usr/share/nginx/audio:ro
      - ./data/logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - ai-sound-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务（修正版）
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile.fixed
    container_name: ai-sound-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=/api
    volumes:
      - ./data/logs/frontend:/app/logs
    networks:
      - ai-sound-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端API服务（修正版）
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile.fixed
    container_name: ai-sound-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=sqlite:////app/data/database/ai_sound.db
      - MEGATTS3_URL=http://host.docker.internal:9000
      - CORS_ORIGINS=http://localhost,https://localhost
      - DEBUG=false
    volumes:
      - ./data:/app/data
      - ./data/logs/backend:/app/logs
    depends_on:
      - database
    networks:
      - ai-sound-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # 数据库服务
  database:
    image: postgres:15-alpine
    container_name: ai-sound-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=ai_sound
      - POSTGRES_USER=ai_sound_user
      - POSTGRES_PASSWORD=ai_sound_password
    volumes:
      - ./data/database/postgres:/var/lib/postgresql/data
      - ./docker/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ai-sound-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_sound_user -d ai_sound"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: ai-sound-redis
    restart: unless-stopped
    volumes:
      - ./data/cache:/data
    networks:
      - ai-sound-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  ai-sound-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # 数据持久化卷
  ai-sound-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data